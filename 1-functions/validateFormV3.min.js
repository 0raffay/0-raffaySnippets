class RFvalidateForm { constructor({ form: e = null, inputs: t = null, button: s = null, specialFields: i = "validate-regex", validateCheckbox: r = !0, errorClass: h = "error", disableClass: l = "disabled", exclude: a = "exclude" }, c) { if (!e) { console.error("RfvalidateForm requires a form element. Please provide it's selector"); return } if (this.form = document.querySelector(e), null == this.form) return; this.inputs = [], this.specialFields = [], this.button = this.setButton(s), this.errorClass = h, this.disableClass = l, this.success = c, this.exclude = a, this.validateCheckbox = r, this.checkboxes = [], this.form.setAttribute("novalidate", "true"), this.setBasicInputs(), t && this.setUserInputs(t), this.validateCheckbox && this.setCheckbox(), this.setSpecialFields(i), this.valid = !1, this.#a() } #a() { this.form.addEventListener("submit", e => { e.preventDefault(), this.checkRegexValidity(), this.checkIfEmpty(), this.checkIfChecked(), this.valid && this.success(this.form) }), this.inputs.forEach(e => { e.addEventListener("input", e => { this.checkIfEmpty(e.target) }) }), this.specialFields && this.specialFields.length && this.specialFields.forEach(e => { e.input.addEventListener("input", t => { this.checkRegexValidity(e.input, e.regex) }) }), this.checkboxes && this.checkboxes.length && this.checkboxes.forEach(e => { e.addEventListener("input", t => { this.checkIfChecked(e) }) }) } checkIfChecked(e) { if (e) { e.checked ? (this.removeErrorClass(e), this.setValid()) : (this.addErrorClass(e), this.setValid()); return } this.checkboxes && this.checkboxes.length && this.checkboxes.forEach(e => { if (!e.checked) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid() }) } checkRegexValidity(e, t) { if (e && t) { let s = e.value; if (!t.test(s)) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid(); return } this.specialFields.forEach(e => { if (!e.regex.test(e.input.value)) { this.addErrorClass(e.input), this.setValid(); return } this.removeErrorClass(e.input), this.setValid() }) } checkIfEmpty(e) { if (e) { if ("" == e.value) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid(); return } this.inputs.forEach(e => { if ("" == e.value) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid() }) } checkErrorClass(e) { return e.classList.contains(this.errorClass) } addErrorClass(e) { e.classList.add(this.errorClass) } removeErrorClass(e) { e.classList.remove(this.errorClass) } removeField(e) { if (Array.isArray(e)) { this.inputs.forEach(t => { e.forEach(e => { t == e && this.inputs.splice(this.inputs.indexOf(t), 1) }) }); return } this.inputs.forEach(t => { t == e && this.inputs.splice(this.inputs.indexOf(t), 1) }), this.specialFields.forEach(t => { t.input == e && (this.specialFields = this.specialFields.filter(t => t.input !== e)) }) } addRegexField(e, t) { this.removeField(e); let s = { input: e, regex: RegExp(t) }; this.specialFields.push(s) } setValid() { let e = [...this.inputs, ...this?.specialFields.map(e => e.input), ...this.checkboxes], t = e.every(e => !this.checkErrorClass(e)); this.valid = t } setBasicInputs() { let e = e => !e.classList.contains(this.exclude) && !e.hasAttribute(this.exclude) && "hidden" !== e.type, t = this.form.querySelectorAll("input[type='text'], input[type='email'], input[type='number'], input[type='date'], select, textarea, input[type='file'], input[type='password']"); if (!t.length) { console.error("No input elements found in form.", this.form); return } t.forEach(t => { e(t) && this.inputs.push(t) }); let s = [{ input: this.form.querySelector("input[type='tel']"), regex: /^\d{8,}$/ }, { input: this.form.querySelector("input[type='email']"), regex: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },]; s.forEach(t => { t.input && e(t.input) && this.addRegexField(t.input, t.regex) }) } setUserInputs(e) { let t = this.form.querySelectorAll(e); if (!t.length) { console.error("No input elements found with selector."); return } t.forEach(e => { let t = this.inputs.indexOf(e); t || this.inputs.push(e) }) } setSpecialFields(e) { let t = this.form.querySelectorAll(`[${e}]`); t.forEach(t => { let s = t.getAttribute(e); if ("" !== s) { this.addRegexField(t, RegExp(t.getAttribute(e))); return } this.inputs.push(t) }) } setCheckbox() { let e = Array.from(this.form.querySelectorAll('input[type="checkbox"]')); e && e.length && e.forEach(e => { this.checkboxes.push(e) }) } setButton(e) { return e ? this.form.querySelector(e) : this.form.querySelector("button[type='submit']") } }
