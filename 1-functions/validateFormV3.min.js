class RFvalidateForm { constructor({ form: e = null, inputs: t = null, button: s = null, specialFields: i = "validate-regex", validateCheckbox: r = !0, validateRadio: h = !0, errorClass: a = "error", disableClass: l = "disabled", exclude: o = "exclude", event: c = "submit", onError: u = null }, n) { if (!e) { console.error("RfvalidateForm requires a form element. Please provide its selector"); return } if (this.form = document.querySelector(e), null == this.form) return; this.inputs = [], this.specialFields = [], s && (this.button = this.setButton(s)), this.errorClass = a, this.disableClass = l, this.success = n, this.exclude = o, this.validateCheckbox = r, this.validateRadio = h, this.checkboxes = [], this.event = c, this.values = {}, this.specialFieldSelector = i, this.userInputSelector = t, u && (this.onError = u), this.form.setAttribute("novalidate", "true"), this.setBasicInputs(), this.userInputSelector && this.setUserInputs(this.userInputSelector), this.validateCheckbox && this.setCheckbox(), this.validateRadio && this.setRadioGroups(), this.setSpecialFields(this.specialFieldSelector), this.valid = !1, this.#a() } collectCurrentValues() { this.inputs.forEach(e => { this.values[e.name] = e.value }), this.checkboxes.forEach(e => { this.values[e.name] = e.checked }), this.radioGroups.forEach(e => { let t = e.find(e => e.checked); t && (this.values[t.name] = t.value) }), this.specialFields.forEach(e => { this.values[e.input.name] = e.input.value }) } handleSuccess() { return this.collectCurrentValues(), this.triggerValidation(), this.valid && "function" == typeof this.success && this.success(this), this.valid } #a() { "submit" == this.event ? this.form.addEventListener("submit", e => { e.preventDefault(), this.handleSuccess() }) : this?.button?.addEventListener("click", e => { e.preventDefault(), this.handleSuccess() }), this.inputs.forEach(e => { e.addEventListener("input", e => { this.values[e.target.name] = e.target.value, this.checkIfEmpty(e.target) }) }), this.specialFields && this.specialFields.length && this.specialFields.forEach(e => { e.input.addEventListener("input", t => { this.values[t.target.name] = t.target.value, this.checkRegexValidity(t.target, e.regex) }) }), this.checkboxes && this.checkboxes.length && this.checkboxes.forEach(e => { e.addEventListener("input", e => { this.values[e.target.name] = e.target.checked, this.checkIfChecked(e.target) }) }), this.radioGroups && this.radioGroups.length && this.radioGroups.forEach(e => { e.forEach(e => { e.addEventListener("change", e => { this.values[e.target.name] = e.target.value, this.checkRadioGroups() }) }) }) } triggerValidation() { return this.checkIfEmpty(), this.checkRegexValidity(), this.checkIfChecked(), this.checkRadioGroups(), this.valid } reinitialize() { this.inputs = [], this.specialFields = [], this.checkboxes = [], this.radioGroups = [], this.setBasicInputs(), this.userInputSelector && this.setUserInputs(this.userInputSelector), this.setSpecialFields(this.specialFieldSelector), this.setCheckbox(), this.setRadioGroups(), this.#a() } checkRadioGroups() { this.radioGroups.length && (this.radioGroups.forEach(e => { let t = e.some(e => e.checked); e.forEach(e => { t ? this.removeErrorClass(e) : this.addErrorClass(e) }) }), this.setValid()) } setRadioGroups() { let e = Array.from(this.form.querySelectorAll('input[type="radio"]')), t = {}; e.forEach(e => { let s = e.name; t[s] || (t[s] = []), t[s].push(e) }), this.radioGroups = Object.values(t) } checkIfChecked(e) { if (e) { e.checked ? (this.removeErrorClass(e), this.setValid()) : (this.addErrorClass(e), this.setValid()); return } this.checkboxes && this.checkboxes.length && this.checkboxes.forEach(e => { if (!e.checked) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid() }) } checkRegexValidity(e, t) { if (e && t) { let s = e.value; if (!t.test(s)) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid(); return } this.specialFields.forEach(e => { if (!e.regex.test(e.input.value)) { this.addErrorClass(e.input), this.setValid(); return } this.removeErrorClass(e.input), this.setValid() }) } checkIfEmpty(e) { if (e) { if ("" == e.value) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid(); return } this.inputs.forEach(e => { if ("" == e.value) { this.addErrorClass(e), this.setValid(); return } this.removeErrorClass(e), this.setValid() }) } checkErrorClass(e) { return e.classList.contains(this.errorClass) } addErrorClass(e) { e.classList.add(this.errorClass) } removeErrorClass(e) { e.classList.remove(this.errorClass) } removeField(e) { if (Array.isArray(e)) { this.inputs.forEach(t => { e.forEach(e => { t == e && this.inputs.splice(this.inputs.indexOf(t), 1) }) }); return } this.inputs.forEach(t => { t == e && this.inputs.splice(this.inputs.indexOf(t), 1) }), this.specialFields.forEach(t => { t.input == e && (this.specialFields = this.specialFields.filter(t => t.input !== e)) }) } addRegexField(e, t) { this.removeField(e); let s = { input: e, regex: RegExp(t) }; this.specialFields.push(s) } setValid() { let e = [...this.inputs, ...this?.specialFields.map(e => e.input), ...this.checkboxes, ...this.radioGroups?.flatMap(e => e)], t = e.every(e => !this.checkErrorClass(e)); t || this.handleOnError(), this.valid = t } handleOnError() { this.onError && "function" == typeof this.onError && this.onError(this) } setBasicInputs() { let e = e => !e.classList.contains(this.exclude) && !e.hasAttribute(this.exclude) && "hidden" !== e.type, t = this.form.querySelectorAll("input[type='text'], input[type='email'], input[type='number'], input[type='date'], select, textarea, input[type='file'], input[type='password']"); t.forEach(t => { e(t) && this.inputs.push(t) }); let s = [{ input: this.form.querySelector("input[type='tel']"), regex: /^\d{8,}$/ }, { input: this.form.querySelector("input[type='email']"), regex: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ }, { input: this.form.querySelector("input[type='tel']"), regex: /^\d{8,}$/ },]; s.forEach(t => { t.input && e(t.input) && this.addRegexField(t.input, t.regex) }) } setUserInputs(e) { let t = this.form.querySelectorAll(e); if (!t.length) { console.error("No input elements found with selector."); return } t.forEach(e => { let t = this.inputs.indexOf(e); t || this.inputs.push(e) }) } setSpecialFields(e) { let t = this.form.querySelectorAll(`[${e}]`); t.forEach(t => { let s = t.getAttribute(e); if ("" !== s) { this.addRegexField(t, RegExp(t.getAttribute(e))); return } this.inputs.push(t) }) } setCheckbox() { let e = Array.from(this.form.querySelectorAll('input[type="checkbox"]')); e && e.length && e.forEach(e => { this.checkboxes.push(e) }) } setButton(e) { return e ? this.form.querySelector(e) : this.form.querySelector("button[type='submit']") } }